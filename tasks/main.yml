---
- name: install app packages
  apt: pkg={{ item }} state=present update_cache=yes cache_valid_time=3600
  with_items:
    - python-pip
    - libpq-dev
    - libev-dev
    - libevent-dev
    - libmemcached-dev
    - libjpeg8
    - libjpeg8-dev
    - libfreetype6
    - libfreetype6-dev
    - zlib1g
    - zlib1g-dev
    - libxml2-dev
    - libxslt1-dev
    - ghostscript
    - libpython{{ python_version }}
    - libpython{{ python_version }}-dev
    - python{{ python_version }}
    - python{{ python_version }}-dev
    - postfix
    - git-core
    - python-virtualenv
    - postgresql-client

- name: ensure postfix is running
  service: name=postfix state=started

- name: remove supervisor system package
  apt: pkg=supervisor state=absent

# pip install to obtain a consistent version number
- name: pip install supervisor
  pip: name=supervisor version=3.0

- name: upload supervisor init script
  copy: src=service.sh
        dest=/etc/init.d/supervisor
        owner=root
        group=root
        mode=744

- name: create directory paths for supervisor
  file: path={{ item }}
        state=directory
        owner=root
        group=root
        mode=744
  with_items:
    - /var/log/supervisor
    - /etc/supervisor/conf.d

- name: upload supervisor config file
  copy: src=supervisord.conf
        dest=/etc/supervisor/supervisord.conf
        owner=root
        group=root
        mode=644
  register: supervisord_conf

- name: symlink supervisor config to official location
  file: src=/etc/supervisor/supervisord.conf
        dest=/etc/supervisord.conf
        state=link

- name: enable supervisor
  service: name=supervisor enabled=yes

- name: restart supervisord
  service: name=supervisor state=restarted
  when: supervisord_conf is changed

- name: store path to github key
  set_fact:
    github_key_path: "{{ ssh_dir }}/github"
  when: github_deploy_key|default('')

- name: upload github key
  copy: content={{ github_deploy_key }}
        dest={{ github_key_path }}
        owner={{ project_user }}
        group={{ project_user }}
        mode=600
  register: github_key
  when: github_deploy_key|default('')

- name: checkout latest project source from {{ repo.url }} branch {{ repo.branch|default('master') }}
  git: repo={{ repo.url }}
       dest={{ source_dir }}
       version={{ repo.branch|default('master') }}
       force=yes
       accept_hostkey=yes
       key_file={{ github_key_path|default(omit) }}
  become_user: "{{ project_user }}"
  vars:
    ansible_ssh_pipelining: true
  when: not source_is_local

# NB! The trailing '/' on the 'src' parameter is significant, do not remove!
# (see the docs: http://docs.ansible.com/ansible/synchronize_module.html)
# Exclude 'deployment' dir since we don't need it on the server and it seems
# to be prone to circular symlinks that break rsync.
# Use whatever ssh executable ansible is using.
- name: sync source from local directory
  synchronize:
    dest: "{{ source_dir }}"
    src: "{{ local_project_dir }}/"
    delete: yes
    rsync_path: "sudo rsync"  # Use sudo on the remote system
    recursive: true
    set_remote_user: no
    rsync_opts:
      - "--exclude=.env"
      - "--exclude=.git"
      - "--exclude=node_modules"
      - "--exclude=deployment"
      - "--exclude=*.pyc"
      - "--rsh={{ ansible_ssh_executable }}"
  become: no  # stops synchronize trying to sudo locally
  when: source_is_local

- name: force proper ownership of source
  file:
    owner: "{{ project_user }}"
    group: "{{ project_user }}"
    path: "{{ source_dir }}"
    recurse: yes
    follow: false

- name: delete pyc files
  shell: find {{ source_dir }} -name '*.pyc' -delete
  become_user: "{{ project_user }}"
  vars:
    ansible_ssh_pipelining: true

# Kept running into AttributeError: '_NamespacePath' object has no attribute 'sort'
# https://github.com/pypa/setuptools/issues/885#issuecomment-387711115
# Fix is to force most recent setuptools
# This has to run *before* tequila-django tries to pip install our requirements.
- name: uninstall setuptools from venv
  become_user: "{{ project_user }}"
  pip:
    name: setuptools
    state: absent
    virtualenv: "{{ venv_dir }}"
    virtualenv_python: "/usr/bin/python{{ python_version }}"

- name: uninstall python-setuptools system package
  become: true
  apt:
    name: python-setuptools
    state: absent

- name: install latest setuptools into venv
  become_user: "{{ project_user }}"
  pip:
    name: setuptools
    state: latest
    virtualenv: "{{ venv_dir }}"
    virtualenv_python: "/usr/bin/python{{ python_version }}"

- name: clear out leftover build cruft from the project requirements
  file: path={{ venv_dir }}/build state=absent

- name: pip install the project requirements
  pip: requirements={{ requirements_file }}
       virtualenv={{ venv_dir }}
       virtualenv_python=/usr/bin/python{{ python_version }}
       extra_args={{ requirements_extra_args|default("") }}
       chdir={{ source_dir }}
  become_user: "{{ project_user }}"
  vars:
    ansible_ssh_pipelining: true

- name: optionally install newrelic
  pip: name=newrelic
       state=latest
       virtualenv={{ venv_dir }}
       virtualenv_python=/usr/bin/python{{ python_version }}
  become_user: "{{ project_user }}"
  vars:
    ansible_ssh_pipelining: true
  when: use_newrelic and not new_relic_version|default(false)

- name: optionally install newrelic at specific version
  pip: name=newrelic
       state=present
       version={{ new_relic_version }}
       virtualenv={{ venv_dir }}
       virtualenv_python=/usr/bin/python{{ python_version }}
  become_user: "{{ project_user }}"
  vars:
    ansible_ssh_pipelining: true
  when: use_newrelic and new_relic_version|default(false)

- name: set up the project python path
  copy: content="{{ django_dir }}"
        dest={{ venv_dir }}/lib/python{{ python_version }}/site-packages/project.pth
        owner={{ project_user }}
        group={{ project_user }}

# THIS needs to come AFTER syncing the source to the server,
# since that might remove files like .env that weren't in the
# source directory locally.
# .env should be in the Django dir in case the Django program
# looks for it in its own top directory.
- name: create/update .env file
  template: >
    dest={{ django_dir }}/.env
    owner={{ project_user }}
    group={{ project_user }}
    mode=400
    src=envfile.j2

# dotenv.sh is in the Django dir since that's where .env is.
- name: add the dotenv.sh helper script
  copy: src=dotenv.sh
        dest={{ django_dir }}/dotenv.sh
        owner={{ project_user }}
        group={{ project_user }}
        mode=700

# manage.sh is at the very top level, I guess for convenience?
- name: copy shell script wrapper for manage.py
  template: src=manage.sh
            dest={{ root_dir }}/manage.sh
            owner={{ project_user }}
            group={{ project_user }}
            mode=700

# We're not using django_manage at the moment in tequila, but the cost of
# keeping this is trivial, and it'll avoid mysterious errors if we start using
# django_manage again:
- name: make manage.py executable (because django_manage expects it)
  file: >
    path={{ django_dir }}/manage.py
    mode=0755
  become_user: "{{ project_user }}"
  vars:
    ansible_ssh_pipelining: true

- name: create low privilege database user {{ db_user }} for project to use at runtime
  when: '{{ create_db_user }}'
  run_once: true
  postgresql_user: name="{{ db_user }}"
                   password="{{ db_password }}"
                   encrypted=yes
                   role_attr_flags=NOCREATEDB,NOCREATEROLE,NOSUPERUSER
                   db="{{ db_name }}"
                   login_user="{{ db_admin_user }}"
                   login_password="{{ db_admin_password }}"
                   login_host="{{ db_host }}"
                   port="{{ db_port }}"

- name: create database {{ db_name }} owned by {{ db_user }}
  when: '{{ create_db }}'
  run_once: true
  postgresql_db: name="{{ db_name }}"
                 owner="{{ db_user }}"
                 state=present
                 encoding='UTF-8'
                 lc_collate='en_US.UTF-8'
                 lc_ctype='en_US.UTF-8'
                 template='template0'
                 login_user="{{ db_admin_user }}"
                 login_password="{{ db_admin_password }}"
                 login_host="{{ db_host }}"
                 port="{{ db_port }}"

- name: django server is at least one of a web server or a worker or runs celery beat
  assert: { that: "is_web or is_worker or is_celery_beat" }

- include: celery.yml
  when: is_worker or is_celery_beat

- include: web.yml
  when: is_web
