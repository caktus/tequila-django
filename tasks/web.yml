---
- name: install gunicorn
  pip:
    name: gunicorn
    state: present
    version: "{{ gunicorn_version|default(omit) }}"
    virtualenv: "{{ venv_dir }}"
    virtualenv_python: /usr/bin/python{{ python_version }}
  become_user: "{{ project_user }}"
  vars:
    ansible_ssh_pipelining: true

- name: configure gunicorn
  template: src=gunicorn.conf
            dest=/etc/supervisor/conf.d/{{ project_name }}-gunicorn.conf
            owner=root
            group=root
            mode=0600

- name: ensure gunicorn is present
  supervisorctl: name={{ project_name }}-server state=present

# TODO: let connections to the {{ project_port }} through the firewall if we are load-balancing.

- name: copy shell script wrapper for manage.py
  template: src=manage.sh
            dest={{ root_dir }}/manage.sh
            owner={{ project_user }}
            group={{ project_user }}
            mode=700

# Use manage.sh so we use the same env vars from .env that we use on
# other invocations of django manage.py. Unfortunately that means we cannot
# use the ansible django_manage module.
# TODO: see if we could use an ansible lookup plugin to read the .env file
# and pass the values to the environment configuration item?
- name: migrate
  shell: "{{ root_dir }}/manage.sh migrate --noinput -v 0"
  args:
    chdir: "{{ django_dir }}"
  become_user: "{{ project_user }}"
  run_once: true
  vars:
    ansible_ssh_pipelining: true

# Important note: "supervisorctl state=present" does a supervisorctl reload.
- name: ensure gunicorn is present and restart
  supervisorctl:
    name: "{{ project_name }}-server"
    state: "{{ item }}"
  with_items:
    - present
    - restarted

# Note: we want the collectstatic step to happen at the very end of
# the roles section for the current playbook, so that it'll still
# happen in the order needed even if the playbook has another role
# after tequila-django, e.g. geerlingguy/nodejs and tequila-nodejs.
# Thus, it is moved out into handlers.

- name: trigger collectstatic
  command: /bin/true
  notify:
    - collectstatic
  run_once: "{{ cloud_staticfiles }}"
